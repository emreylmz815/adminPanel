@model WebApplication1.Models.ProposalFormViewModel

@{
    ViewBag.Title = "Teklif Oluştur";
    Layout = "~/Areas/admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="content-wrapper">
    <h2 class="mb-4">Teklif Oluştur</h2>

    @using (Html.BeginForm("Create", "Proposal", FormMethod.Post, new { @class = "proposal-form" }))
    {
        @Html.AntiForgeryToken()

        <div class="card mb-4">
            <div class="card-header">Firma Bilgileri</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CompanyName)
                            @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CompanyAddress)
                            @Html.TextAreaFor(model => model.CompanyAddress, new { @class = "form-control", rows = 3 })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CompanyLogoUrl)
                            @Html.TextBoxFor(model => model.CompanyLogoUrl, new { @class = "form-control", placeholder = "https://..." })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CompanyStampText)
                            @Html.TextAreaFor(model => model.CompanyStampText, new { @class = "form-control", rows = 3 })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AuthorizedSignatureName)
                            @Html.TextBoxFor(model => model.AuthorizedSignatureName, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AuthorizedSignatureTitle)
                            @Html.TextBoxFor(model => model.AuthorizedSignatureTitle, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AuthorizedSignatureImageUrl)
                            @Html.TextBoxFor(model => model.AuthorizedSignatureImageUrl, new { @class = "form-control", placeholder = "https://..." })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">Müşteri Bilgileri</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientName)
                            @Html.TextBoxFor(model => model.ClientName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientAddress)
                            @Html.TextAreaFor(model => model.ClientAddress, new { @class = "form-control", rows = 3 })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-row row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProposalNumber)
                                    @Html.TextBoxFor(model => model.ProposalNumber, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProposalDate)
                                    @Html.TextBoxFor(model => model.ProposalDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Notes)
                            @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", rows = 3 })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>Ürünler</span>
                <button type="button" class="btn btn-sm btn-primary" id="add-product">Ürün Satırı Ekle</button>
            </div>
            <div class="card-body">
                @Html.ValidationMessage("Products", null, new { @class = "text-danger" })
                <div class="table-responsive">
                    <table class="table table-bordered" id="product-table">
                        <thead class="thead-light">
                            <tr>
                                <th>Ürün Adı</th>
                                <th>Açıklama</th>
                                <th>Adet</th>
                                <th>Birim Fiyat (₺)</th>
                                <th>KDV (%)</th>
                                <th>Ara Toplam</th>
                                <th>KDV</th>
                                <th>Toplam</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.Products.Count; i++)
                            {
                                @Html.Partial("_ProductRow", Model.Products[i], new ViewDataDictionary { TemplateInfo = new System.Web.Mvc.TemplateInfo { HtmlFieldPrefix = $"Products[{i}]" } })
                            }
                        </tbody>
                    </table>
                </div>
                <div class="row mt-3">
                    <div class="col-md-4 offset-md-8">
                        <ul class="list-group">
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Ara Toplam</span>
                                <strong id="net-total">0</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>KDV Toplam</span>
                                <strong id="vat-total">0</strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Genel Toplam</span>
                                <strong id="grand-total">0</strong>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="text-right">
            <button type="submit" class="btn btn-success btn-lg">Teklifi Oluştur</button>
        </div>
    }
    </div>
    <script>
        (function () {
            const currencyFormatter = new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' });

            function recalculateTotals() {
                let netTotal = 0;
                let vatTotal = 0;
                let grandTotal = 0;

                document.querySelectorAll('#product-table tbody tr').forEach(function (row) {
                    const qty = parseFloat(row.querySelector('.product-quantity').value) || 0;
                    const unit = parseFloat(row.querySelector('.product-unit').value) || 0;
                    const vatRate = parseFloat(row.querySelector('.product-vat').value) || 0;

                    const net = qty * unit;
                    const vat = net * (vatRate / 100);
                    const gross = net + vat;

                    row.querySelector('.product-net').innerText = currencyFormatter.format(net || 0);
                    row.querySelector('.product-vat-amount').innerText = currencyFormatter.format(vat || 0);
                    row.querySelector('.product-gross').innerText = currencyFormatter.format(gross || 0);

                    netTotal += net;
                    vatTotal += vat;
                    grandTotal += gross;
                });

                document.getElementById('net-total').innerText = currencyFormatter.format(netTotal || 0);
                document.getElementById('vat-total').innerText = currencyFormatter.format(vatTotal || 0);
                document.getElementById('grand-total').innerText = currencyFormatter.format(grandTotal || 0);
            }

            function registerRowEvents(row) {
                row.querySelectorAll('input').forEach(function (input) {
                    input.addEventListener('input', recalculateTotals);
                });
                const removeButton = row.querySelector('.remove-product');
                if (removeButton) {
                    removeButton.addEventListener('click', function () {
                        row.remove();
                        recalculateTotals();
                        refreshRowIndexes();
                    });
                }
            }

            function refreshRowIndexes() {
                const rows = document.querySelectorAll('#product-table tbody tr');
                rows.forEach(function (row, index) {
                    row.querySelectorAll('input').forEach(function (input) {
                        const name = input.getAttribute('name');
                        if (name) {
                            const updated = name.replace(/Products\[(?:\d+|INDEX)\]/g, `Products[${index}]`);
                            input.setAttribute('name', updated);
                        }
                    });
                });
            }

            document.querySelectorAll('#product-table tbody tr').forEach(function (row) {
                registerRowEvents(row);
            });

            document.getElementById('add-product').addEventListener('click', function () {
                const tbody = document.querySelector('#product-table tbody');
                const nextIndex = tbody.querySelectorAll('tr').length;
                const template = document.querySelector('#product-row-template').innerHTML.replace(/INDEX/g, nextIndex);
                const tempContainer = document.createElement('tbody');
                tempContainer.innerHTML = template;
                const newRow = tempContainer.querySelector('tr');
                tbody.appendChild(newRow);
                refreshRowIndexes();
                registerRowEvents(newRow);
                recalculateTotals();
            });

            recalculateTotals();
        })();
    </script>

    <script type="text/template" id="product-row-template">
        @Html.Partial("_ProductRow", new WebApplication1.Models.ProposalProductInput(), new ViewDataDictionary { TemplateInfo = new System.Web.Mvc.TemplateInfo { HtmlFieldPrefix = "Products[INDEX]" } })
    </script>
